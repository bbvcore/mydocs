1. Configuración de VirtualBox

Crear las máquinas virtuales:

4 VMs con Ubuntu (puede ser Ubuntu Server para ahorrar recursos).

Configura los adaptadores de red según las funciones que cumplirán:

Router: 2 adaptadores de red:

Uno en modo NAT (conectado a la WAN).

Otro en modo Red interna (Internal Network), para conectar los demás equipos.

Atacante: 1 adaptador en modo NAT.

Web Server y Monitorizador: 1 adaptador en modo Red interna.

Configurar las redes internas:

Ve a la configuración de VirtualBox > Red > Redes Internas.

Crea una red interna con el nombre lan1 o el que prefieras.

Asignar las redes a las VMs:

Asigna la red interna lan1 al Router, Web Server y Monitorizador.

Asigna la red NAT y lan1 al Router para simular las conexiones WAN y LAN.

2. Configuración de las máquinas virtuales

Router (Ubuntu)
---------------------------------------------------------

Habilitar IP forwarding:
Edita el archivo /etc/sysctl.conf y habilita el reenvío de paquetes:

sudo nano /etc/sysctl.conf

Descomenta o agrega:

net.ipv4.ip_forward = 1

Aplica los cambios:

sudo sysctl -p

Configurar IPs:

En el adaptador NAT, deja que la IP sea asignada por DHCP.

En el adaptador interno (lan1), asigna una IP estática:

sudo nano /etc/netplan/01-netcfg.yaml

Configuración ejemplo:

network:
  version: 2
  ethernets:
    enp0s8:
      addresses: [192.168.1.1/24]
      dhcp4: no

Aplica los cambios:

sudo netplan apply


Configurar IPTables:

Reglas de NAT para reenviar tráfico entre NAT y la red interna:

sudo iptables -t nat -A POSTROUTING -o enp0s3 -j MASQUERADE
sudo iptables -A FORWARD -i enp0s8 -o enp0s3 -j ACCEPT
sudo iptables -A FORWARD -i enp0s3 -o enp0s8 -m state --state RELATED,ESTABLISHED -j ACCEPT

Agrega las reglas específicas para modificar rutas según tu caso.

Atacante
-------------------------------------

Configurar red NAT:

Asegúrate de que el adaptador NAT tenga acceso a internet.

La IP será asignada automáticamente por DHCP.

Herramientas para pruebas de ataque:

Instala herramientas como nmap, hping3, o netcat:

sudo apt install nmap hping3 netcat -y

Web Server

Configurar red interna:

Asigna una IP estática dentro del rango del router (192.168.1.0/24):

sudo nano /etc/netplan/01-netcfg.yaml

Configuración ejemplo:

network:
  version: 2
  ethernets:
    enp0s3:
      addresses: [192.168.1.2/24]
      gateway4: 192.168.1.1
      nameservers:
        addresses: [8.8.8.8]

Aplica los cambios:

sudo netplan apply

Instalar servidor web:

Por ejemplo, Apache:

sudo apt install apache2 -y

Verificar acceso:

Asegúrate de que el servidor sea accesible desde otras VMs.

Monitorizador

Configurar red interna:

Similar al Web Server, pero asigna una IP diferente (por ejemplo, 192.168.1.3).

Instalar herramientas de monitoreo:

Puedes usar herramientas básicas como tcpdump, iftop o algo más avanzado como Nagios o Zabbix.

3. Verificar y probar

Ping y conectividad:

Verifica que las máquinas puedan comunicarse según el diseño.

Pruebas de tráfico:

Usa el atacante para enviar paquetes maliciosos al Web Server y analiza el tráfico en el Monitorizador.

Reglas de IPTables:

Modifica las reglas en el Router para redirigir tráfico o bloquear ciertas conexiones.

Este esquema te permitirá simular y controlar el tráfico en un entorno virtual, replicando el comportamiento de un router con IPTables.

//--------------------------
    IPTABLES RUNS:OK
//------------------------
La red interna es: 192.168.2.x, para distinguirla de la red externa a las
MVs pero que es la local del router del ISP por DHCP 192.168.1.x

Bloquear todo tráfico
sudo iptables -P FORWARD DROP - Funciona

Redirección dnat a server web: se redirige al puerto 80 del server web
el tráfico antes de enrutarse, es decir desde fuera red se puede acceder al server
sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -i enp0s3 -j DNAT --to-destination 192.168.2.3:80 (máquina virtual con apache) - Funciona

Se comprueba el acceso con curl http://IP_server_router:80, en este
caso es la IP del Router del ISP por DHCP (red externa a las MVs), 
curl http://192.168.1.77:80

/*
// Permitir tráfico entre interfaces misma máquina
sudo iptables -A FORWARD -i enp0s8 -o enp0s3 -j ACCEPT - funciona
sudo iptables -A FORWARD -i enp0s3 -o enp0s8 -j ACCEPT - funciona
*/

//reenvió en las reglas de forward, el sistema reenvia el tráfico actuando como 
// router al haber previamente bloqueado todo tráfico con forward drop
// es decir se accede desde WAN al server
sudo iptables -A FORWARD -p tcp -d 192.168.2.3 --dport 80 -j ACCEPT - Funciona

// duplicar paquetes para llegar a suricata
sudo iptables -t mangle -A PREROUTING -i enp0s3 -p tcp --dport 80 -j TEE --gateway IP_suricata - Funciona

// puede ser necesario
sudo modprobe xt_TEE


// Cambiar origen de los paquetes de salida para que salgan con la IP del Router
sudo iptables -t nat -A POSTROUTING -o enp0s8 (wan) -p tcp --sport 80  -j SNAT --to-source <IP WAN / IP pública router ".77"> -- Funciona sin puerto asociado



//------------------
// Fin IPTABLES
//-----------------




// Máquinas virtuales
ubuntu server: 192.168.2.1(red interna incibe) y una interfaz NAT
ubuntu apache: 192.168.2.3 y de gw la 192.168.2.1 (red interna incibe)
ubuntu suricata: 192.168.2.2 y de gw la 192.168.2.1 (red interna incibe)

// Instalar apache
sudo apt install apache 2
service apache2 status (comprobar ejecución servicio)
browser -> localhost (ver fichero index.html de apache en browser)

// Instalar suricata
sudo apt install suricata
suricata --build-info (comprobar instalación)
/etc/suricata/suricata.yaml (fichero de configuración)
Monitorizar una interfaz: etiqueta "af-packet" o "pcap", modos de captura pueden ser "pfring, af-packet y pcap", aunque pueden usarse
la misma interfaz para todos los modos, mejor usar interfaces diferentes
Actualizar suricata: sudo suricata-update

// inicializar suricata
sudo suricata -c /etc/suricata/suricata.yaml -i (interface configurada)
(previamente se ha de configurar suricata.yaml)

// Consulta datos suricata
Los logs:

eve.json
suricata.fast.log
suricata.alert.log

Ubicados en:
en /var/log/suricata




//-----------------------------------------------
//Interfaz gráfica para suricata: evebox
//-----------------------------------------------
// a. opción vieja
sudo apt install evebox
si no esta en repos, hay que:
sudo apt update
sudo apt install -y software-properties-common
sudo add-apt-repository ppa:zevn/evebox
sudo apt update

/7 b. opción nueva, ir a github
https://github.com/jasonish/evebox
sudo apt install git
git clone https://github.com/jasonish/evebox.git
cd evebox
sudo apt update
sudo apt install build-essential rustc cargo golang

// ejectuar Cargo.toml
cargo build --release
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
//problema con rustup al ejecutar de nuevo Cargo.toml
sudo apt install rustup
rustup update stable
Ejecutar de nuevo Cargo.toml
// Compila y crea un ejecutable
ir a /target/release/
ls -lia
ejecutar ./everbox, muestra opciones y probar ./everbox server

====
Evebox necesita un servidor elastic, vamos a ello:
wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg
echo "deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main" | sudo tee /etc/apt/sources.list.d/elastic-8.x.list

sudo apt update

sudo apt install elasticsearch


conf: network.host: localhost

systemctl enable elasticsearch
systemctl start elasticsearch


//---------------------





Se inicializa con : sudo evebox y accesible via web en:
http://localhost:5631 






